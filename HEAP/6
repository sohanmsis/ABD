import heapq

class Task:
    def __init__(self, task_id, priority, execution_time, deadline):
        self.task_id = task_id
        self.priority = priority
        self.execution_time = execution_time
        self.deadline = deadline

class PriorityQueue:
    def __init__(self):
        self.queue = []

    def is_empty(self):
        return not bool(self.queue)

    def add_task(self, task):
        heapq.heappush(self.queue, (task.priority, task.execution_time, task))

    def get_next_task(self):
        return heapq.heappop(self.queue)[2]

class Scheduler:
    def __init__(self):
        self.current_time = 0
        self.pq = PriorityQueue()
        self.arrived_jobs = []

    def add_task(self, task):
        self.pq.add_task(task)
        self.arrived_jobs.append((task.task_id, self.current_time))

    def process_next_task(self):
        if self.pq.is_empty():
            return None

        next_task = self.pq.get_next_task()
        self.current_time += next_task.execution
