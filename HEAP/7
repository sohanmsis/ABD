import heapq

class Task:
    def __init__(self, task_id, priority, execution_time, deadline):
        self.task_id = task_id
        self.priority = priority
        self.execution_time = execution_time
        self.deadline = deadline

class PriorityQueue:
    def __init__(self):
        self.queue = []

    def is_empty(self):
        return not bool(self.queue)

    def add_task(self, task):
        heapq.heappush(self.queue, (task.priority, task.execution_time, task))

    def get_next_task(self):
        return heapq.heappop(self.queue)[2]

class Scheduler:
    def __init__(self):
        self.current_time = 0
        self.pq = PriorityQueue()
        self.arrived_jobs = []
        self.start_time = 0
        self.end_time = float('inf')

    def add_task(self, task):
        self.pq.add_task(task)
        self.arrived_jobs.append((task.task_id, self.current_time))

    def set_start_time(self, start_time):
        self.start_time = start_time

    def set_end_time(self, end_time):
        self.end_time = end_time

    def process_next_task(self):
        if self.pq.is_empty() or self.current_time >= self.end_time:
            return None

        next_task = self.pq.get_next_task()
        if self.current_time >= self.start_time:
            self.current_time += next_task.execution_time
            if self.current_time <= next_task.deadline:
                return next_task
        return None

if __name__ == '__main__':
    scheduler = Scheduler()
    tasks = [
        Task(1, 2, 3, 10),
        Task(2, 1, 4, 15),
        Task(3, 3, 2, 8),
        Task(4, 2, 5, 12)
    ]

    for task in tasks:
        scheduler.add_task(task)

    scheduler.set_start_time(5)
    scheduler.set_end_time(20)

    scheduled_tasks = []

    while True:
        task = scheduler.process_next_task()
        if task:
            scheduled_tasks.append(task)

    print("Scheduled Tasks:")
    for task in scheduled_tasks:
        print(f"Task {task.task_id} (Priority: {task.priority}, Execution Time: {task.execution_time}, Deadline: {task.deadline})")
